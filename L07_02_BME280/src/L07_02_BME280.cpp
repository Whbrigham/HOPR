/* 
 * Project L07_02 BME280
 * Author: Brigham
 * Date: 
 * For comprehensive documentation and examples, please visit:
 * https://docs.particle.io/firmware/best-practices/firmware-template/
 */

// Include Particle Device OS APIs
#include "Particle.h"
#include "Adafruit_BME280.h"
#include "IoTClassroom_CNM.h"
#include "time.h"
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1306.h"
#include "neopixel.h"


const int OLED_RESET=-1;
Adafruit_SSD1306 display(OLED_RESET);

const char N = 164;

// 'B flight 64x64', 64x64px
const unsigned char BFlight [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x0e, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x18, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9c, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x8c, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe7, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x70, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x3f, 0xff, 0x86, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0x3f, 0xff, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x7f, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0x3f, 0xff, 0xce, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x3f, 0xec, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x70, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc6, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xce, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x8c, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9c, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x18, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x0c, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_BME280 bme; //this is for Temp, Pressure and Humidity sensor
int hexaddress= 0x76;

SYSTEM_MODE(SEMI_AUTOMATIC);

SYSTEM_THREAD(ENABLED);

SerialLogHandler logHandler(LOG_LEVEL_INFO);

char status;
const char degree =248; //ASCII code for degrees page 275 of lesson
int lastMinute = 0;  // Stores the last time the event occurred
int currentTime = 0; // Stores the current time in milliseconds
int PIXELNUMBER;     
int b;
const int PIXELCOUNT = 16;
Adafruit_NeoPixel pixel(PIXELCOUNT, SPI1, WS2812B);
void pixelFill(int startPixel,int endPixel,int hexColor);

void setup() {
  Serial.begin(9600);
  waitFor(Serial.isConnected,10000);
// Initialize BME280 sensor
  status = bme.begin();
 if (status == false) {
 Serial.printf("BME280 at address 0x%02X failed", hexaddress);
 }
//Initialize OLED 0x3C
 display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
//initialize Neopixels #4-16
 pixel.begin();
 pixel.setBrightness(40); // bri is a value 0-255
 pixel.show();
}

void loop() {
	currentTime = millis();  // Get the current time in milliseconds
  // Check if 1/2 second (500 milliseconds) has passed
 if ((currentTime - lastMinute) > 500) {
    lastMinute = millis();  // Update lastMinute to the current time 
	if (bme.begin()) {
		int tempC = bme.readTemperature();
		float pressPA = bme.readPressure();
		float humidity = bme.readHumidity();
		float baro_Hg = pressPA / 100.0 * 0.02953;
		float F = tempC * 9.0 / 5.0 + 32;
		// Display data on Serial Monitor
		Serial.printf("[Temp: %0.f F]\t[Pressure: %.2f Hg]\n  [Humidity: %0.0f %%]\n",F,baro_Hg,humidity);
		Serial.println("");Serial.println("");Serial.println("");Serial.println("");
		// Display data on OLED
		display.printf("%0.fF\t%0.0f%%\n",F,humidity);
		display.printf("%.2f\n",baro_Hg);
		display.setRotation(2);
		display.display();
		display.setTextSize(6);
  		display.setTextColor(WHITE);
  		display.setCursor(1,0);
  		display.clearDisplay();
		pixel.clear();
		if (tempC <1) {
			for (int i=4; i<PIXELCOUNT;i++) {
			  pixel.setPixelColor(i, white);
			}
		}
		  else if (tempC >=1 && tempC <15) {
		  	for (int i = 4; i<PIXELCOUNT;i++) {
			  pixel.setPixelColor(i, blue);
			}
		}
		  else if (tempC >=15 && tempC <25) {
			for (int i = 4; i<PIXELCOUNT;i++) {
			  pixel.setPixelColor(i, green);
			}
		}
		  else if (tempC >=25 && tempC <33) {
			for (int i = 4; i < PIXELCOUNT;i++) {
			  pixel.setPixelColor(i, yellow);
			}
		}
		  else if (tempC>=33) {
			for (int i = 4; i < PIXELCOUNT;i++) {
			  pixel.setPixelColor(i, red);
			}
		}
		  else if (tempC>=33) {
			for (int i = 4; i < PIXELCOUNT;i++) {
			  pixel.setPixelColor(i, red);
			}
		}

			
		if (pressPA > 69691.880 && pressPA < 101320.74) {
				pixelFill(2,3,green);
		}
			else if (pressPA >= 69691.880) {
				pixelFill(2,3,orange);
		}
			else if (pressPA <= 101320.74) {
				pixelFill(2,3,navy);
		}
		
		if (humidity >=90) {
				pixelFill(0,1,blue);
		}
			else if (humidity>=80) {
				pixelFill(0,1,teal);
		}
			else if (humidity>=70) {
				pixelFill(0,1,green);
		}
			else if (humidity>=55) {
				pixelFill(0,1,lime);
		}
			else if (humidity>=40) {
				pixelFill(0,1,yellow);
		}
			else if (humidity>=25) {
				pixelFill(0,1,maroon);
		}
			else if (humidity>=0) {
				pixelFill(0,1,red);
			
			}
		}
	}
}
void pixelFill(int startPixel,int endPixel,int hexColor) {
	for(PIXELNUMBER=startPixel; PIXELNUMBER<=endPixel; PIXELNUMBER++){
	pixel.setPixelColor(PIXELNUMBER,hexColor);
 	}
	  pixel.show();
}